#!/bin/bash

# GitHub CLI Setup and Status Checker
# Script autom√°tico para configurar GitHub CLI y verificar el estado del workflow

set -e

echo "üöÄ GitHub CLI Setup y Status Checker"
echo "===================================="

# Verificar si GitHub CLI est√° instalado
if ! command -v gh &> /dev/null; then
    echo "‚ùå GitHub CLI no encontrado"
    exit 1
fi

echo "‚úÖ GitHub CLI instalado: $(gh --version | head -1)"

# Verificar autenticaci√≥n
echo "üîê Verificando autenticaci√≥n..."
if gh auth status &> /dev/null; then
    echo "‚úÖ GitHub CLI ya est√° autenticado"
    USER=$(gh api user --jq .login)
    echo "   Usuario: $USER"
else
    echo "üîë Configurando autenticaci√≥n de GitHub CLI..."
    echo "   Se abrir√° el navegador para autenticar..."
    echo "   Si no se abre autom√°ticamente, usa el c√≥digo que aparece"
    
    # Intentar autenticaci√≥n autom√°tica
    gh auth login --git-protocol https --hostname github.com --web
    
    if gh auth status &> /dev/null; then
        echo "‚úÖ Autenticaci√≥n exitosa"
        USER=$(gh api user --jq .login)
        echo "   Usuario autenticado: $USER"
    else
        echo "‚ùå Error en la autenticaci√≥n"
        exit 1
    fi
fi

# Funci√≥n para verificar el estado del workflow
check_workflow_status() {
    echo ""
    echo "üìä Estado del Workflow de GitHub Actions"
    echo "======================================="
    
    # Obtener los √∫ltimos workflow runs
    echo "üîç Obteniendo √∫ltimos workflow runs..."
    
    RUNS=$(gh run list --workflow=build-release.yml --limit=3 --json=status,conclusion,createdAt,displayTitle,url,databaseId 2>/dev/null || echo "[]")
    
    if [ "$RUNS" = "[]" ]; then
        echo "‚ö†Ô∏è  No se encontraron workflows con nombre 'build-release.yml'"
        echo "   Intentando buscar workflows gen√©ricos..."
        RUNS=$(gh run list --limit=3 --json=status,conclusion,createdAt,displayTitle,url,databaseId 2>/dev/null || echo "[]")
    fi
    
    if [ "$RUNS" != "[]" ]; then
        echo "$RUNS" | jq -r '.[] | "
üîÑ Run: \(.displayTitle // "Sin t√≠tulo")
   Estado: \(.status // "desconocido") 
   Resultado: \(.conclusion // "en progreso")
   Creado: \(.createdAt // "fecha desconocida")
   URL: \(.url // "sin URL")
   ID: \(.databaseId // "sin ID")
"'
    else
        echo "‚ùå No se pudieron obtener los workflow runs"
        echo "   Posibles causas:"
        echo "   - El repositorio no tiene workflows configurados"
        echo "   - No tienes permisos para ver los workflows"
        echo "   - El workflow a√∫n no se ha ejecutado"
    fi
    
    # Verificar releases
    echo ""
    echo "üöÄ √öltimos Releases"
    echo "=================="
    
    RELEASES=$(gh release list --limit=3 --json=tagName,name,createdAt,url,assets 2>/dev/null || echo "[]")
    
    if [ "$RELEASES" != "[]" ]; then
        echo "$RELEASES" | jq -r '.[] | "
üì¶ Release: \(.name // .tagName)
   Tag: \(.tagName)
   Creado: \(.createdAt)
   URL: \(.url)
   Assets: \(.assets | length) archivos"'
        
        # Mostrar assets del √∫ltimo release
        LATEST_ASSETS=$(echo "$RELEASES" | jq -r '.[0].assets[]? | "   üìé \(.name) (\(.size / 1024 / 1024 | floor)MB)"')
        if [ ! -z "$LATEST_ASSETS" ]; then
            echo "   Assets del √∫ltimo release:"
            echo "$LATEST_ASSETS"
        fi
    else
        echo "‚ö†Ô∏è  No se encontraron releases"
        echo "   El workflow a√∫n no ha creado ning√∫n release exitoso"
    fi
}

# Funci√≥n para monitorear workflow en tiempo real
monitor_workflow() {
    echo ""
    echo "üëÄ Monitoreando workflow en tiempo real..."
    echo "========================================"
    
    # Buscar workflow runs en progreso
    RUNNING_RUNS=$(gh run list --workflow=build-release.yml --limit=1 --json=status,databaseId --jq '.[] | select(.status == "in_progress") | .databaseId' 2>/dev/null || echo "")
    
    if [ ! -z "$RUNNING_RUNS" ]; then
        echo "üîÑ Encontrado workflow en progreso (ID: $RUNNING_RUNS)"
        echo "   Siguiendo progreso... (Ctrl+C para detener)"
        gh run watch $RUNNING_RUNS || echo "   ‚ö†Ô∏è  No se pudo seguir el workflow autom√°ticamente"
    else
        echo "‚ÑπÔ∏è  No hay workflows ejecut√°ndose actualmente"
    fi
}

# Funci√≥n para disparar workflow manualmente
trigger_workflow() {
    echo ""
    echo "üöÄ Disparar Workflow Manualmente"
    echo "==============================="
    
    read -p "¬øQuieres disparar el workflow manualmente? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "üîÑ Disparando workflow..."
        if gh workflow run build-release.yml; then
            echo "‚úÖ Workflow disparado exitosamente"
            echo "   Espera unos segundos y ejecuta el script nuevamente para ver el progreso"
        else
            echo "‚ùå Error disparando workflow"
        fi
    fi
}

# Ejecutar verificaciones
check_workflow_status

# Preguntar si quiere monitorear
echo ""
read -p "¬øQuieres monitorear workflows en tiempo real? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    monitor_workflow
fi

# Preguntar si quiere disparar workflow
trigger_workflow

echo ""
echo "‚úÖ Script completado"
echo ""
echo "üí° Comandos √∫tiles para usar despu√©s:"
echo "   gh run list                    # Ver todos los workflows"
echo "   gh run view --log             # Ver logs del √∫ltimo run"
echo "   gh release list               # Ver todos los releases"
echo "   gh workflow run build-release.yml  # Disparar workflow manualmente"
